<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:database-config.properties"/>
    </bean>

    <!-- druid连接池配置数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <property name="maxWait" value="60000"/>
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="SELECT 1"/>
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false"/>
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false"/>
    </bean>

    <!-- c3p0数据库连接池 -->
    <!--<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
    <!--&lt;!&ndash; 配置连接池属性 &ndash;&gt;-->
    <!--<property name="driverClass" value="${jdbc.driverClassName}"/>-->
    <!--<property name="jdbcUrl" value="${jdbc.url}"/>-->
    <!--<property name="user" value="${jdbc.username}"/>-->
    <!--<property name="password" value="${jdbc.password}"/>-->
    <!--&lt;!&ndash; c3p0连接池的私有属性 &ndash;&gt;-->
    <!--<property name="maxPoolSize" value="30"/>-->
    <!--<property name="minPoolSize" value="10"/>-->
    <!--&lt;!&ndash; 关闭连接后不自动commit &ndash;&gt;-->
    <!--<property name="autoCommitOnClose" value="false"/>-->
    <!--&lt;!&ndash; 获取连接超时时间 &ndash;&gt;-->
    <!--<property name="checkoutTimeout" value="10000"/>-->
    <!--&lt;!&ndash; 当获取连接失败重试次数 &ndash;&gt;-->
    <!--<property name="acquireRetryAttempts" value="2"/>-->
    <!--</bean>-->

    <!--BasicDataSource-->
   <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close" lazy-init="false" p:driverClassName="${jdbc.driverClassName}"
          p:url="${jdbc.url}" p:username="${jdbc.username}" p:password="${jdbc.password}"
          p:initialSize="5" p:maxActive="50" p:maxIdle="5" p:maxWait="1000"
          p:poolPreparedStatements="false" p:defaultAutoCommit="true"
          p:removeAbandoned="true" p:removeAbandonedTimeout="60"
          p:validationQuery="select 1 from dual" p:testOnBorrow="true"
          p:timeBetweenEvictionRunsMillis="10000" p:minEvictableIdleTimeMillis="10000">
    </bean>-->

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件. -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>

        <!--MyBatis全局配置文件,我在mybatis-config.xml暂时只配置了扫描类别名，与下秒配置typeAliasesPackage效果是一样的。-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml" /> -->

        <!--自动扫描指定路径下的实体类并建立别名-->
        <property name="typeAliasesPackage" value="com.summit.common"/>

        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/summit/IUserManagerMapper.xml"/>

    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的DAO接口类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.summit.common"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--启用注解方式管理事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>